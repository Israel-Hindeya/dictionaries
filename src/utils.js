// Generated by CoffeeScript 1.10.0
window.utils = {
  getRandomInt: function(min, max) {
    if (min == null) {
      min = 1;
    }
    if (max == null) {
      max = 10;
    }
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
  },
  postJson: function(url, data) {
    return $.ajax({
      type: 'POST',
      url: url,
      data: JSON.stringify(data),
      contentType: 'application/json'
    });
  },
  getJson: function(url, data) {
    return $.ajax({
      type: 'GET',
      url: url,
      data: data,
      contentType: 'application/json'
    });
  },
  tryGet: function(url, obj, message, times, timeout) {
    var _get, dfd, me, params, t;
    me = this;
    dfd = $.Deferred();
    params = {
      url: url
    };
    if (obj) {
      params = $.extend(params, obj);
    }
    if (times == null) {
      times = 3;
    }
    if (timeout == null) {
      timeout = 3 * 1000;
    }
    t = 0;
    _get = function() {
      t += 1;
      return $.ajax(params).then((function(res) {
        return dfd.resolve(res);
      }), function(jqXHR, textStatus) {
        var msg;
        msg = "ajax failed (" + t + "/" + times + ")";
        if (t < times) {
          console.warn(msg, params, jqXHR);
          return setTimeout(_get, timeout);
        } else {
          console.error(msg, params, jqXHR);
          return me.postJson(gConfig.logUrl, {
            message: message || msg,
            description: {
              params: params,
              jqXHR: jqXHR
            }
          }).always(function(res) {
            return dfd.reject(res);
          });
        }
      });
    };
    _get();
    return dfd;
  },
  extraKeyMap: {
    Enter: 13,
    Space: 32,
    Tab: 9,
    End: 35,
    Home: 36,
    PageDown: 34,
    PageUp: 33,
    ArrowDown: 40,
    ArrowLeft: 37,
    ArrowRight: 39,
    ArrowUp: 38,
    Escape: 27
  },
  checkEventKey: function(event, sk1, sk2, key) {
    if (sk1 && !event[sk1.toLowerCase() + 'Key']) {
      return false;
    }
    if (sk2 && !event[sk2.toLowerCase() + 'Key']) {
      return false;
    }
    if (this.extraKeyMap[key]) {
      if (event.keyCode !== this.extraKeyMap[key]) {
        return false;
      }
    } else if (key && event.keyCode !== key.charCodeAt(0)) {
      return false;
    }
    return true;
  }
};
